#!/bin/bash

# ═══════════════════════════════════════════════════════════════════════
# SEPOLIA RPC MANAGER - Fast Setup with Geth & Prysm
# Version: 2.0
# Description: Complete RPC node management (Debian/Ubuntu compatible)
# ═══════════════════════════════════════════════════════════════════════

# Color definitions (same as Aztec script)
CYAN='\033[0;36m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
WHITE='\033[1;37m'
AMBER='\033[0;33m'
PURPLE='\033[0;35m'
NC='\033[0m'
BOLD='\033[1m'
DIM='\033[2m'

# Configuration
RPC_DIR="/root/ethereum"
GETH_PORT=8545
WS_PORT=8546
BEACON_PORT=3500

# Remove or comment out the trap handlers that might be causing issues
# trap cleanup INT

# Helper Functions
install_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${YELLOW}Installing Docker...${NC}"
        
        # Check if Ubuntu or Debian
        if [ ! -f /etc/os-release ]; then
            echo -e "${RED}Not Ubuntu or Debian${NC}"
            exit 1
        fi
        
        # Update system
        sudo apt update -y && sudo apt upgrade -y
        
        # Install prerequisites
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        sudo install -m 0755 -d /etc/apt/keyrings
        
        # Add Docker's official GPG key
        . /etc/os-release
        repo_url="https://download.docker.com/linux/$ID"
        curl -fsSL "$repo_url/gpg" | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        
        # Set up the repository
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] $repo_url $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Install Docker
        sudo apt update -y
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        
        # Test Docker installation
        if sudo docker run hello-world >/dev/null 2>&1; then
            sudo docker rm $(sudo docker ps -a --filter "ancestor=hello-world" --format "{{.ID}}") --force 2>/dev/null || true
            sudo docker image rm hello-world 2>/dev/null || true
            sudo systemctl enable docker
            sudo systemctl restart docker
            echo -e "${GREEN}✅ Docker Installed Successfully${NC}"
        else
            echo -e "${RED}❌ Docker installation failed${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}✅ Docker is already installed${NC}"
    fi
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        install_docker
    fi
}

get_public_ip() {
    curl -s ipv4.icanhazip.com 2>/dev/null || echo "localhost"
}

# Main Functions

install_rpc() {
    clear
    echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║        🚀 INSTALL SEPOLIA RPC (GETH & PRYSM)         ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""
    
    # Check minimum requirements
    RAM_GB=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024 / 1024))
    CORES=$(nproc)
    STORAGE_GB=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
    
    if [ "$RAM_GB" -lt 8 ] || [ "$CORES" -lt 2 ]; then
        echo -e "${RED}⚠️  Your VPS does not meet minimum requirements${NC}"
        echo -e "${WHITE}Current: RAM ${RAM_GB}GB, Cores ${CORES}${NC}"
        echo -e "${WHITE}Required: RAM 8GB+, Cores 2+${NC}"
        read -p "Continue anyway? (y/N): " cont
        if [[ ! "$cont" =~ ^[Yy]$ ]]; then
            return
        fi
    fi
    
    # Check if already installed
    if [ -d "$RPC_DIR" ] && [ -f "$RPC_DIR/docker-compose.yml" ]; then
        echo -e "${YELLOW}⚠️  RPC already installed at $RPC_DIR${NC}"
        echo -e "${CYAN}Do you want to reinstall? (y/N):${NC}"
        read -p "" reinstall
        if [[ ! "$reinstall" =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Installation cancelled${NC}"
            read -p "Press Enter to continue..."
            return
        fi
        
        # Stop existing containers
        echo -ne "${CYAN}Stopping existing containers...${NC}"
        cd $RPC_DIR
        docker-compose down 2>/dev/null
        docker compose down 2>/dev/null
        cd ~
        echo -e " ${GREEN}✓${NC}"
    fi
    
    # Install dependencies
    echo -ne "${CYAN}Installing dependencies...${NC}"
    sudo apt update >/dev/null 2>&1
    sudo apt install -y wget lz4 aria2 docker-compose-plugin docker-compose >/dev/null 2>&1
    echo -e " ${GREEN}✓${NC}"
    
    # Create directories
    echo -ne "${CYAN}Creating directories...${NC}"
    mkdir -p /root/ethereum/execution
    mkdir -p /root/ethereum/consensus
    cd $RPC_DIR
    echo -e " ${GREEN}✓${NC}"
    
    # Generate JWT secret
    echo -ne "${CYAN}Generating JWT secret...${NC}"
    openssl rand -hex 32 > /root/ethereum/jwt.hex
    echo -e " ${GREEN}✓${NC}"
    
    # Create docker-compose.yml
    echo -ne "${CYAN}Creating Docker configuration...${NC}"
    cat > docker-compose.yml << 'EOF'
services:
    geth:
        image: ethereum/client-go:v1.16.4
        container_name: geth
        network_mode: host
        restart: unless-stopped
        volumes:
            - /root/ethereum/execution:/data
            - /root/ethereum/jwt.hex:/data/jwt.hex
        command:
            - --sepolia
            - --http
            - --http.api=eth,net,web3
            - --http.addr=0.0.0.0
            - --authrpc.addr=0.0.0.0
            - --authrpc.vhosts=*
            - --authrpc.jwtsecret=/data/jwt.hex
            - --authrpc.port=8551
            - --syncmode=snap
            - --datadir=/data
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    prysm:
        image: gcr.io/prysmaticlabs/prysm/beacon-chain:v6.1.2
        container_name: prysm
        network_mode: host
        restart: unless-stopped
        volumes:
            - /root/ethereum/consensus:/data
            - /root/ethereum/jwt.hex:/data/jwt.hex
        depends_on:
            - geth
        command:
            - --sepolia
            - --accept-terms-of-use
            - --datadir=/data
            - --disable-monitoring
            - --rpc-host=0.0.0.0
            - --execution-endpoint=http://127.0.0.1:8551
            - --jwt-secret=/data/jwt.hex
            - --rpc-port=4000
            - --grpc-gateway-corsdomain=*
            - --grpc-gateway-host=0.0.0.0
            - --grpc-gateway-port=3500
            - --min-sync-peers=3
            - --checkpoint-sync-url=https://checkpoint-sync.sepolia.ethpandaops.io
            - --genesis-beacon-api-url=https://checkpoint-sync.sepolia.ethpandaops.io
            - --subscribe-all-data-subnets
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
EOF
    echo -e " ${GREEN}✓${NC}"
    
    # Start services
    echo -ne "${CYAN}Starting RPC services...${NC}"
    if command -v docker compose &> /dev/null; then
        docker compose up -d >/dev/null 2>&1
    else
        docker-compose up -d >/dev/null 2>&1
    fi
    
    if [ $? -eq 0 ]; then
        echo -e " ${GREEN}✓${NC}"
    else
        echo -e " ${RED}✗${NC}"
        echo -e "${RED}Failed to start services${NC}"
        read -p "Press Enter to continue..."
        return
    fi
    
    # Configure firewall
    echo -ne "${CYAN}Configuring firewall...${NC}"
    sudo ufw allow $GETH_PORT/tcp >/dev/null 2>&1
    sudo ufw allow $WS_PORT/tcp >/dev/null 2>&1
    sudo ufw allow $BEACON_PORT/tcp >/dev/null 2>&1
    sudo ufw allow 30303/tcp >/dev/null 2>&1
    sudo ufw allow 30303/udp >/dev/null 2>&1
    sudo ufw allow 4000/tcp >/dev/null 2>&1
    echo -e " ${GREEN}✓${NC}"
    
    # Get IP
    VPS_IP=$(get_public_ip)
    
    # Final message
    echo -e "\n${GREEN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║              ✅ RPC INSTALLATION COMPLETE             ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}📊 RPC Endpoints:${NC}"
    echo -e "  ${WHITE}• HTTP RPC:${NC} ${YELLOW}http://$VPS_IP:$GETH_PORT${NC}"
    echo -e "  ${WHITE}• WebSocket:${NC} ${YELLOW}ws://$VPS_IP:$WS_PORT${NC}"
    echo -e "  ${WHITE}• Beacon API:${NC} ${YELLOW}http://$VPS_IP:$BEACON_PORT${NC}"
    echo ""
    echo -e "${YELLOW}⏳ Sync time: 24-30 hours${NC}"
    echo -e "\n${CYAN}Use option 2 to check sync progress${NC}"
    read -p "Press Enter to continue..."
}

check_sync() {
    clear
    echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║              📊 RPC SYNC STATUS CHECK                 ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""
    
    # Check if RPC is installed
    if [ ! -d "$RPC_DIR" ]; then
        echo -e "${RED}❌ RPC not installed. Please install first (Option 1)${NC}"
        read -p "Press Enter to continue..."
        return
    fi
    
    cd $RPC_DIR
    
    # Check if containers are running
    if ! docker ps | grep -q "geth"; then
        echo -e "${RED}❌ Geth container is not running${NC}"
        echo -e "${YELLOW}Starting containers...${NC}"
        if command -v docker compose &> /dev/null; then
            docker compose up -d
        else
            docker-compose up -d
        fi
        sleep 5
    fi
    
    echo -e "${CYAN}Checking sync status...${NC}\n"
    
    # Check Geth sync
    echo -e "${WHITE}═══[ GETH STATUS ]═══${NC}"
    GETH_SYNC=$(curl -s -X POST -H "Content-Type: application/json" \
        --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' \
        http://localhost:$GETH_PORT 2>/dev/null)
    
    if [ -z "$GETH_SYNC" ]; then
        echo -e "${RED}❌ Cannot connect to Geth RPC${NC}"
    elif echo "$GETH_SYNC" | grep -q '"result":false'; then
        echo -e "${GREEN}✅ Geth is fully synced${NC}"
        
        # Get current block
        BLOCK=$(curl -s -X POST -H "Content-Type: application/json" \
            --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
            http://localhost:$GETH_PORT | grep -Po '"result":"\K[^"]*')
        
        if [ ! -z "$BLOCK" ]; then
            BLOCK_DEC=$((16#${BLOCK#0x}))
            echo -e "  ${WHITE}Current block:${NC} ${GREEN}$BLOCK_DEC${NC}"
        fi
    else
        echo -e "${YELLOW}⏳ Geth is syncing...${NC}"
        
        CURRENT=$(echo "$GETH_SYNC" | grep -Po '"currentBlock":"\K[^"]*')
        HIGHEST=$(echo "$GETH_SYNC" | grep -Po '"highestBlock":"\K[^"]*')
        
        if [ ! -z "$CURRENT" ] && [ ! -z "$HIGHEST" ]; then
            CURRENT_DEC=$((16#${CURRENT#0x}))
            HIGHEST_DEC=$((16#${HIGHEST#0x}))
            
            if [ $HIGHEST_DEC -gt 0 ]; then
                PROGRESS=$(awk "BEGIN {printf \"%.2f\", ($CURRENT_DEC/$HIGHEST_DEC)*100}")
                echo -e "  ${WHITE}Progress:${NC} ${YELLOW}${PROGRESS}%${NC}"
                echo -e "  ${WHITE}Current Block:${NC} $CURRENT_DEC"
                echo -e "  ${WHITE}Target Block:${NC} $HIGHEST_DEC"
                
                # Get ETA from Geth logs
                ETA=$(docker logs geth --tail 20 2>&1 | grep -oP 'eta=\K[^ ]+' | tail -1)
                if [ ! -z "$ETA" ]; then
                    echo -e "  ${WHITE}Estimated time:${NC} ${YELLOW}${ETA}${NC}"
                fi
            fi
        fi
    fi
    
    # Check Prysm sync
    echo -e "\n${WHITE}═══[ PRYSM BEACON STATUS ]═══${NC}"
    BEACON_SYNC=$(curl -s http://localhost:$BEACON_PORT/eth/v1/node/syncing 2>/dev/null)
    
    if [ -z "$BEACON_SYNC" ]; then
        echo -e "${RED}❌ Cannot connect to Prysm Beacon${NC}"
    elif echo "$BEACON_SYNC" | grep -q '"is_syncing":false'; then
        echo -e "${GREEN}✅ Beacon is fully synced${NC}"
    else
        echo -e "${YELLOW}⏳ Beacon is syncing...${NC}"
        SYNC_DISTANCE=$(echo "$BEACON_SYNC" | grep -Po '"sync_distance":"\K[^"]*')
        if [ ! -z "$SYNC_DISTANCE" ]; then
            echo -e "  ${WHITE}Slots behind:${NC} ${YELLOW}$SYNC_DISTANCE${NC}"
        fi
    fi
    
    # Overall status
    echo -e "\n${WHITE}═══[ OVERALL STATUS ]═══${NC}"
    
    GETH_SYNCED=false
    BEACON_SYNCED=false
    
    if echo "$GETH_SYNC" | grep -q '"result":false'; then
        GETH_SYNCED=true
    fi
    
    if echo "$BEACON_SYNC" | grep -q '"is_syncing":false'; then
        BEACON_SYNCED=true
    fi
    
    if [ "$GETH_SYNCED" = true ] && [ "$BEACON_SYNCED" = true ]; then
        VPS_IP=$(get_public_ip)
        echo -e "${GREEN}✅ RPC is fully synced and ready to use${NC}"
        echo -e "\n${CYAN}Your RPC URL for Aztec:${NC}"
        echo -e "${YELLOW}http://$VPS_IP:$GETH_PORT${NC}"
    else
        echo -e "${YELLOW}⏳ RPC is still syncing. Please wait...${NC}"
    fi
    
    read -p "$(echo -e ${WHITE}Press Enter to continue...${NC})"
}

view_rpc() {
    clear
    echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                 📜 RPC CONNECTION INFO                ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""
    
    if [ ! -d "$RPC_DIR" ]; then
        echo -e "${RED}❌ RPC not installed. Please install first (Option 1)${NC}"
        read -p "Press Enter to continue..."
        return
    fi
    
    VPS_IP=$(get_public_ip)
    
    echo -e "${YELLOW}═══[ RPC & AZTEC ON SAME VPS ]═══${NC}"
    echo -e "${WHITE}Use these URLs in your Aztec configuration:${NC}"
    echo -e "  ${CYAN}• Sepolia RPC:${NC} ${GREEN}http://localhost:8545${NC}"
    echo -e "  ${CYAN}• Beacon API:${NC}  ${GREEN}http://localhost:3500${NC}"
    
    echo -e "\n${YELLOW}═══[ RPC & AZTEC ON SEPARATE VPS ]═══${NC}"
    echo -e "${WHITE}Use these URLs in your Aztec configuration:${NC}"
    echo -e "  ${CYAN}• Sepolia RPC:${NC} ${GREEN}http://$VPS_IP:8545${NC}"
    echo -e "  ${CYAN}• Beacon API:${NC}  ${GREEN}http://$VPS_IP:3500${NC}"
    
    echo -e "\n${AMBER}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    cd $RPC_DIR
    
    echo -e "\n${CYAN}View logs?${NC}"
    echo -e "  ${WHITE}1)${NC} Geth logs"
    echo -e "  ${WHITE}2)${NC} Prysm logs"
    echo -e "  ${WHITE}3)${NC} Both logs"
    echo -e "  ${WHITE}4)${NC} Back to menu"
    
    read -p "$(echo -e ${CYAN}Choose option [1-4]: ${NC})" log_choice
    
    case $log_choice in
        1)
            echo -e "\n${CYAN}Showing Geth logs (Press Ctrl+C to go back)...${NC}\n"
            trap 'echo -e "\n${YELLOW}Stopped viewing logs${NC}"; return' INT
            docker logs geth --tail 100 -f 2>&1
            trap - INT
            ;;
        2)
            echo -e "\n${CYAN}Showing Prysm logs (Press Ctrl+C to go back)...${NC}\n"
            trap 'echo -e "\n${YELLOW}Stopped viewing logs${NC}"; return' INT
            docker logs prysm --tail 100 -f 2>&1
            trap - INT
            ;;
        3)
            echo -e "\n${CYAN}Showing all logs (Press Ctrl+C to go back)...${NC}\n"
            trap 'echo -e "\n${YELLOW}Stopped viewing logs${NC}"; return' INT
            if command -v docker compose &> /dev/null; then
                docker compose logs --tail 100 -f 2>&1
            else
                docker-compose logs --tail 100 -f 2>&1
            fi
            trap - INT
            ;;
        4)
            return
            ;;
        *)
            echo -e "${RED}Invalid option${NC}"
            sleep 1
            ;;
    esac
}

delete_rpc() {
    clear
    echo -e "${RED}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║            ⚠️  DELETE RPC NODE WARNING ⚠️              ║${NC}"
    echo -e "${RED}╚══════════════════════════════════════════════════════╝${NC}"
    echo ""
    
    if [ ! -d "$RPC_DIR" ]; then
        echo -e "${YELLOW}RPC is not installed${NC}"
        read -p "Press Enter to continue..."
        return
    fi
    
    echo -e "${YELLOW}This will delete:${NC}"
    echo -e "  ${WHITE}• Geth container and data${NC}"
    echo -e "  ${WHITE}• Prysm container and data${NC}"
    echo -e "  ${WHITE}• All synced blockchain data${NC}"
    echo -e "  ${WHITE}• Directory: /root/ethereum${NC}"
    echo ""
    echo -e "${RED}⚠️  This action cannot be undone${NC}"
    read -p "$(echo -e ${RED}Are you sure? [y/N]: ${NC})" confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        echo ""
        cd $RPC_DIR
        
        # Stop containers
        echo -ne "${CYAN}Stopping containers...${NC}"
        if command -v docker compose &> /dev/null; then
            docker compose down 2>/dev/null
        else
            docker-compose down 2>/dev/null
        fi
        docker stop geth prysm 2>/dev/null
        echo -e " ${GREEN}✓${NC}"
        
        # Remove containers
        echo -ne "${CYAN}Removing containers...${NC}"
        docker rm geth prysm 2>/dev/null
        echo -e " ${GREEN}✓${NC}"
        
        # Remove images
        echo -ne "${CYAN}Removing Docker images...${NC}"
        docker rmi ethereum/client-go:v1.16.4 2>/dev/null
        docker rmi gcr.io/prysmaticlabs/prysm/beacon-chain:v6.1.2 2>/dev/null
        echo -e " ${GREEN}✓${NC}"
        
        # Remove data
        echo -ne "${CYAN}Removing RPC data...${NC}"
        cd ~
        rm -rf /root/ethereum
        echo -e " ${GREEN}✓${NC}"
        
        # Remove firewall rules
        echo -ne "${CYAN}Cleaning firewall rules...${NC}"
        sudo ufw delete allow 8545/tcp 2>/dev/null
        sudo ufw delete allow 8546/tcp 2>/dev/null
        sudo ufw delete allow 3500/tcp 2>/dev/null
        sudo ufw delete allow 4000/tcp 2>/dev/null
        sudo ufw delete allow 30303/tcp 2>/dev/null
        sudo ufw delete allow 30303/udp 2>/dev/null
        echo -e " ${GREEN}✓${NC}"
        
        echo -e "\n${GREEN}✅ RPC Node completely deleted${NC}"
    else
        echo -e "\n${CYAN}❌ Deletion cancelled${NC}"
    fi
    
    read -p "$(echo -e ${WHITE}Press Enter to continue...${NC})"
}

# Main menu - FIXED EXIT OPTION
main_menu() {
    while true; do
        clear
        
        # Get system specs
        RAM_GB=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024 / 1024))
        CORES=$(nproc)
        STORAGE_GB=$(df -BG / | awk 'NR==2 {print $2}' | sed 's/G//')
        STORAGE_FREE=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
        
        echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
        echo -e "${CYAN}║          🌐 SEPOLIA RPC NODE MANAGER                  ║${NC}"
        echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
        echo -e "${WHITE}    Fast Ethereum Sepolia RPC with Geth & Prysm${NC}"
        echo -e "${AMBER}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
        
        # Display requirements vs current specs
        echo -e "${YELLOW}📋 Requirements vs Your VPS:${NC}"
        echo -e "┌─────────────────────────────────────────────┐"
        
        # RAM Check
        if [ "$RAM_GB" -ge 16 ]; then
            echo -e "│ RAM:     ${WHITE}Required: 16GB${NC}  │  ${GREEN}You: ${RAM_GB}GB ✓${NC}"
        else
            echo -e "│ RAM:     ${WHITE}Required: 16GB${NC}  │  ${RED}You: ${RAM_GB}GB ✗${NC}"
        fi
        
        # Cores Check
        if [ "$CORES" -ge 4 ]; then
            echo -e "│ Cores:   ${WHITE}Required: 4${NC}     │  ${GREEN}You: ${CORES} ✓${NC}"
        else
            echo -e "│ Cores:   ${WHITE}Required: 4${NC}     │  ${RED}You: ${CORES} ✗${NC}"
        fi
        
        # Storage Check
        if [ "$STORAGE_GB" -ge 1000 ]; then
            echo -e "│ Storage: ${WHITE}Required: 1TB${NC}   │  ${GREEN}You: ${STORAGE_GB}GB ✓${NC}"
        else
            echo -e "│ Storage: ${WHITE}Required: 1TB${NC}   │  ${YELLOW}You: ${STORAGE_GB}GB ⚠${NC}"
        fi
        
        echo -e "│ Free:    ${WHITE}Available${NC}       │  ${CYAN}${STORAGE_FREE}GB${NC}"
        echo -e "└─────────────────────────────────────────────┘"
        
        # Quick status
        echo -e "\n${WHITE}RPC Status:${NC}"
        if [ -d "$RPC_DIR" ] && docker ps | grep -q "geth" 2>/dev/null; then
            echo -e "${GREEN}● Installed and Running${NC}"
        elif [ -d "$RPC_DIR" ]; then
            echo -e "${YELLOW}● Installed but Stopped${NC}"
        else
            echo -e "${RED}● Not Installed${NC}"
        fi
        
        echo -e "\n${PURPLE}═══════════════[ ${WHITE}MENU OPTIONS${NC} ${PURPLE}]═══════════════${NC}\n"
        echo -e "  ${CYAN}[${WHITE}1${CYAN}]${NC} ${WHITE}🚀 Install RPC (Geth & Prysm)${NC}"
        echo -e "  ${CYAN}[${WHITE}2${CYAN}]${NC} ${WHITE}📊 Sync Checkup${NC}"
        echo -e "  ${CYAN}[${WHITE}3${CYAN}]${NC} ${WHITE}📜 RPC Connection Info & Logs${NC}"
        echo -e "  ${CYAN}[${WHITE}4${CYAN}]${NC} ${WHITE}🗑️  Delete RPC Node${NC}"
        echo -e "  ${CYAN}[${WHITE}5${CYAN}]${NC} ${WHITE}🚪 Exit${NC}"
        
        echo -e "\n${AMBER}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        read -p "$(echo -e ${CYAN}Select option [1-5]: ${NC})" choice
        
        case $choice in
            1)
                install_rpc
                ;;
            2)
                check_sync
                ;;
            3)
                view_rpc
                ;;
            4)
                delete_rpc
                ;;
            5)
                echo -e "\n${CYAN}Thanks for using RPC Manager${NC}"
                echo -e "${WHITE}Goodbye 👋${NC}\n"
                break  # Exit the loop gracefully
                ;;
            *)
                echo -e "${RED}Invalid option. Please choose between 1-5.${NC}"
                sleep 2
                ;;
        esac
    done
}

# Check Docker on startup
check_docker

# Start main menu
main_menu

# Script ends here naturally
